---
# reloading systemd configuration
- name: systemd daemon reload
  command: /bin/systemctl daemon-reload

# enabling and starting grafana-server
- name: enable and start grafana-server service
  systemd:
   name: grafana-server
   enabled: yes
   state: started

#- name: checking plugins installed
#  find:
#    file_type: directory
#    recurse: false
#    paths: "{{ grafana_datadir }}/plugins"
#  register: plugins_installed

#- name: installing prometheus plugin
#  become: true
#  command: "grafana-cli --pluginsDir {{ grafana_datadir }}/plugins plugins install {{ item }}"
#  args:
#    creates: "{{ grafana_datadir }}/plugins/{{ item }}"
#  with_items: 
#    - "{{grafana_plugins}}
#  register: _plugin_install
#  until: _plugin_install is succeeded
#  retries: 5
#  delay: 2
#  when: prometheus not in plugins_installed
#  notify:
#    - restart-grafana

# getting datasources configured
- name: get datasources
  uri:
    HEADER_Content-Type: application/json
    url: http://localhost:{{ grafana_port }}/api/datasources
    method: GET
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    force_basic_auth: yes
  register: datasources
  when: grafana_datasource is defined

- name: set datasource fact
  set_fact:
    grafana_list_datasources: "{{ datasources.json | default([]) | map(attribute='name') | list }}"

# adding prometheus data source to grafana
- name: adding prometheus data source to grafana
  uri:
    HEADER_Content-Type: application/json
    url: http://localhost:{{ grafana_port }}/api/datasources 
    method: POST
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    body: "{{ grafana_datasource | to_json }}"
    body_format: json
    force_basic_auth: yes
  register: result
  changed_when: result.status == 200
  when: grafana_datasource is defined and grafana_datasource.name not in grafana_list_datasources
